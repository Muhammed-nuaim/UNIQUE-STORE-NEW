<%- include('../layouts/admin/header.ejs') %>

<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<style>
   .error-message {
       color: red;
   }
   .thumbnails-container {
       display: flex;
       overflow-x: auto;
   }
   .thumbnail {
       margin-right: 10px;
   }
</style>

<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-6">
           <div class="card mb-4">
               <div class="card-body">
                   <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                       
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                           <div id="productName-error" class="error-message"></div>
                       </div>

                       <div class="mb-4">
                           <label class="form-label">Full description</label>
                           <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                           <div id="description-error" class="error-message"></div>
                       </div>

                       <div class="mb-4">
                        <label class="form-label">Full Specification</label>
                        <textarea placeholder="Type here" id="specificationid" name="specification" class="form-control border" rows="4"></textarea>
                        <div id="specification-error" class="error-message"></div>
                    </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Regular price</label>
                                   <input placeholder="₹" name="regularPrice" type="text" class="form-control border">
                                   <div id="regularPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Sale price</label>
                                   <input placeholder="₹" name="salePrice" type="text" class="form-control border">
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">  
                               <div class="mb-4">
                                   <label class="form-label">Quantity</label>
                                   <input placeholder="" name="quantity" type="text" class="form-control border">
                                   <div id="quantity-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Size</label>
                                   <select class="form-select border" name="size">
                                        <option value="1:12">1:12</option>
                                        <option value="1:64">1:64</option>
                                        <option value="1:18">1:18</option>
                                </select>
                                   <div id="size-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>

                       <div class="card mb-4">
                           <div class="card-body">
                               <div class="row gx-2">
                                   <div class="col-sm-6 mb-3">
                                       <label class="form-label">Category</label>
                                       <select class="form-select border" name="category">
                                           <% cat.forEach(category => { %>
                                               <option value="<%= category.name %>"><%= category.name %></option>
                                           <% }) %>
                                       </select>
                                       <div id="category-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                       </div>

                       <div class="card mb-2">
                           <div class="card-header">
                               <h4>Choose images</h4>
                           </div>

                           <!-- Image upload and cropper section for 4 images -->
                           <div class="row">
                               <!-- Image 1 -->
                               <div class="col-lg-6 mb-4">
                                   <label for="input1" class="form-label">Image 1</label>
                                   <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg"
                                       onchange="viewImage(event, 1)">
                                   <div id="imgPreview1" class="mt-2">
                                       <img src="" alt="" id="imgView1" style="max-width: 100%; display:none;">
                                   </div>
                                   <div id="croppedImageContainer1" class="image-cropper mt-2" style="display:none;">
                                       <img src="" id="croppedImg1" alt="">
                                       <button type="button" id="saveButton1" class="btn-sm btn-primary">Save Cropped</button>
                                   </div>
                                   <div id="images-error" class="error-message"></div>
                               </div>

                               <!-- Add similar blocks for Image 2, 3, and 4 -->
                               <!-- Image 2 -->
                               <div class="col-lg-6 mb-4">
                                   <label for="input2" class="form-label">Image 2</label>
                                   <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg"
                                       onchange="viewImage(event, 2)">
                                   <div id="imgPreview2" class="mt-2">
                                       <img src="" alt="" id="imgView2" style="max-width: 100%; display:none;">
                                   </div>
                                   <div id="croppedImageContainer2" class="image-cropper mt-2" style="display:none;">
                                       <img src="" id="croppedImg2" alt="">
                                       <button type="button" id="saveButton2" class="btn-sm btn-primary">Save Cropped</button>
                                   </div>
                                   <div id="images-error" class="error-message"></div>
                               </div>

                               <div class="col-lg-6 mb-4">
                                <label for="input3" class="form-label">Image 3</label>
                                <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage(event, 3)">
                                <div id="imgPreview3" class="mt-2">
                                    <img src="" alt="" id="imgView3" style="max-width: 100%; display:none;">
                                </div>
                                <div id="croppedImageContainer3" class="image-cropper mt-2" style="display:none;">
                                    <img src="" id="croppedImg3" alt="">
                                    <button type="button" id="saveButton3" class="btn-sm btn-primary">Save Cropped</button>
                                </div>
                                <div id="images-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-6 mb-4">
                                <label for="input4" class="form-label">Image 4</label>
                                <input class="form-control" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg"
                                    onchange="viewImage(event, 4)">
                                <div id="imgPreview4" class="mt-2">
                                    <img src="" alt="" id="imgView4" style="max-width: 100%; display:none;">
                                </div>
                                <div id="croppedImageContainer4" class="image-cropper mt-2" style="display:none;">
                                    <img src="" id="croppedImg4" alt="">
                                    <button type="button" id="saveButton4" class="btn-sm btn-primary">Save Cropped</button>
                                </div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                           </div>
                       </div>

                       <div>
                           <button class="btn btn-md rounded font-sm hover-up" type="submit" onclick="validateAndSubmit()">Publish</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include('../layouts/admin/footer.ejs') %>

<script>
    function validateForm() {
        let isValid = true;
        clearErrorMessages();
        
        // Get form elements using getElementById instead of getElementsByName
        const name = document.getElementById('product_name').value;
        const description = document.getElementById('descriptionid').value;
        const specification = document.getElementById('specificationid').value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const saleprice = document.getElementsByName('salePrice')[0].value;
        const size = document.getElementsByName('size')[0].value;
        const quantity = document.getElementsByName('quantity')[0].value;
        
        // Debug logs - remove these after testing
        console.log('Description value:', description);
        console.log('Description element:', document.getElementById('descriptionid'));

        // Check for existing images (for edit page)
        const existingImages = document.querySelectorAll('[id^="imgView"]');
        let hasExistingImages = false;
        
        existingImages.forEach(img => {
            if (img.src && !img.src.endsWith('undefined') && img.style.display !== 'none') {
                hasExistingImages = true;
            }
        });

        // Required field validations with trimmed values and proper length checks
        if (!name || name.trim().length === 0) {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        }
        
        // Description validation with proper null check and trim
        if (!description || description.toString().trim().length === 0) {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }

        // Specification validation with proper null check and trim
        if (!specification || specification.toString().trim().length === 0) {
            displayErrorMessage('specification-error', 'Please enter a product specification.');
            isValid = false;
        }

        // Numeric validations with proper type checking
        if (!quantity || isNaN(quantity) || parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }

        if (!price || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0 || parseFloat(saleprice) > parseFloat(price)) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (!saleprice || !/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) <= 0 || parseFloat(saleprice) > parseFloat(price)) {
            if(parseFloat(saleprice) > parseFloat(price)) {
            displayErrorMessage('salePrice-error', 'Please enter a less than Regular Price.');
            } else {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
            }
            isValid = false;
        }

        if (!size || size.trim().length === 0) {
            displayErrorMessage('size-error', 'Please select a size.');
            isValid = false;
        }

        // Image validation
        if (!hasExistingImages) {
            const newImages = document.querySelectorAll('input[type="file"][name="images"]');
            let hasNewImages = false;
            
            newImages.forEach(input => {
                if (input.files && input.files.length > 0) {
                    hasNewImages = true;
                }
            });

            if (!hasNewImages) {
                displayErrorMessage("images-error", 'Please select at least one image.');
                isValid = false;
            }
        }

        return isValid;
    }

    function validateAndSubmit(event) {
        if (event) {
            event.preventDefault();
        }
        
        if (validateForm()) {
            document.forms[0].submit();
        }
        
        return false;
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = 'none';
        });
    }
        
    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
        element.innerText = '';
        });
        const errorMessage = document.getElementById('errorMessage');   
    }
        
        
    function viewImage1(event) {
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
    }
        
        
    function viewImage2(event) {
        document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
    }
        
        
    function viewImage3(event) {
        document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
    }
        
        
    function viewImage4(event) {
        document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
    }
        
        
    function viewImage(event, index) {
        let input = event.target;
        let reader = new FileReader();
    reader.onload = function () {
        let dataURL = reader.result;
        let image = document.getElementById('imgView' + index);
        image.src = dataURL;
        let cropper = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 1,
        guides: true,
        background: false,
        autoCropArea: 1,
        zoomable: true
    });
    let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
        cropperContainer.style.display = 'block';
        let saveButton = document.querySelector('#saveButton' + index);
        saveButton.addEventListener('click', async function () {
        let croppedCanvas = cropper.getCroppedCanvas();
        let croppedImage = document.getElementById("croppedImg" + index);
        croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
        let timestamp = new Date().getTime();
        let fileName = `cropped-img-${timestamp}-${index}.png`;
        await croppedCanvas.toBlob(blob => {
        let input = document.getElementById('input' + index);
        let imgFile = new File([blob], fileName, blob)
        const fileList = new DataTransfer();
        fileList.items.add(imgFile);
        input.files = fileList.files
    });
        cropperContainer.style.display = 'none';
        cropper.destroy();
    });
        };
    reader.readAsDataURL(input.files[0]);
    }
    
    
    const selectedImages = [];
    document.getElementById("Input1").addEventListener("change", handleFileSelect);
    
    
    function handleFileSelect(event) {
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        addedImagesContainer.innerHTML = "";
        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");
        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";
        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function () {
        const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
                thumbnail.remove();
        });
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    };           
</script>